defmodule ChromicPDF.Supervisor do
  @moduledoc """
  Use this for multiple ChromicPDF instances.

  ## When is this useful?

  * You want to completely separate two or more PDF "queues"
  * You want to give your PDF module a custom API

  ## Usage

      defmodule MyApp.MyPDFGenerator do
        use ChromicPDF.Supervisor
      end

      def MyApp.Application do
        def start(_type, _args) do
          children = [
            MyApp.MyPDFGenerator
          ]

          Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)
        end
      end
  """

  @doc false
  defmacro __using__(_opts) do
    # credo:disable-for-next-line Credo.Check.Refactor.LongQuoteBlocks
    quote do
      use Supervisor
      alias ChromicPDF.{Browser, GhostscriptPool, Processor, SessionPool}

      def start_link(config \\ []) do
        Supervisor.start_link(__MODULE__, config, name: __MODULE__)
      end

      @impl Supervisor
      def init(config) do
        config = Keyword.merge(config, chromic: __MODULE__)

        children = [
          {GhostscriptPool, config},
          {Browser, config},
          {SessionPool, config}
        ]

        Supervisor.init(children, strategy: :rest_for_one)
      end

      @doc """
      Prints a PDF.

      This call blocks until the PDF has been created.

      ## Output options

      ### Print and return Base64-encoded PDF

          {:ok, blob} = ChromicPDF.print_to_pdf({:url, "file:///example.html"})

          # Can be displayed in iframes
          "data:application/pdf;base64,\#{blob}"

      ### Print to file

          :ok = ChromicPDF.print_to_pdf({:url, "file:///example.html"}, output: "output.pdf")

      ### Print to temporary file

          {:ok, :some_result} =
            ChromicPDF.print_to_pdf({:url, "file:///example.html"}, output: fn path ->
              send_download(path)
              :some_result
            end)

      The temporary file passed to the callback will be deleted when the callback returns.

      ## Input options

      ### Print from URL

      Passing in a URL is the simplest way of printing a PDF. A target in Chrome is told to
      navigate to the given URL. When navigation is finished, the PDF is printed.

          ChromicPDF.print_to_pdf({:url, "file:///example.html"})

      One may pass `http` or `https` URLs just like above, only be aware that you will need to
      enable "online mode" first. See ["Running in online mode"](#module-running-in-online-mode)
      for explanation.

          ChromicPDF.print_to_pdf({:url, "http:///example.net"})

      #### Cookies

      If your URL requires authentication, you can pass in a session cookie. The cookie is
      automatically cleared after the PDF has been printed.

          cookie = %{
            name: "foo",
            value: "bar",
            domain: "localhost"
          }

          ChromicPDF.print_to_pdf({:url, "http:///example.net"}, set_cookie: cookie)

      See [`Network.setCookie`](https://chromedevtools.github.io/devtools-protocol/tot/Network#method-setCookie)
      for options. `name` and `value` keys are required.

      ### Print from in-memory HTML

      For convenience, it is also possible to pass a HTML blob to `print_to_pdf/2`. The HTML is
      sent to the target using the [`Pahe.setDocumentContent`](https://chromedevtools.github.io/devtools-protocol/tot/Page#method-setDocumentContent) function.

          ChromicPDF.print_to_pdf(
            {:html, "<h1>Hello World!</h1>"}
          )

      #### In-memory content can be iodata

      In-memory HTML for both the main input parameter as well as the header and footer options
      can be passed as `iodata`. Such lists are converted to String before submission to the
      session process by passing them through `:erlang.iolist_to_binary/1`.

          ChromicPDF.print_to_pdf(
            {:html, ["<style>p { color: green; }</style>", "<p>green paragraph</p>"]}
          )

      #### Content from Phoenix templates

      If your content is generated by a Phoenix template (and hence comes in the form of
      `{:safe, iodata()}`), you will need to pass it to `Phoenix.HTML.safe_to_string/1` first.

          content = SomeView.render("body.html") |> Phoenix.HTML.safe_to_string()
          ChromicPDF.print_to_pdf({:html, content})

      ## PDF printing options

          ChromicPDF.print_to_pdf(
            {:url, "file:///example.html"},
            print_to_pdf: %{
              pageRanges: "1-2"
            }
          )

      Please note the camel-case. For a full list of options to the `printToPDF` function,
      please see the Chrome documentation at:

      https://chromedevtools.github.io/devtools-protocol/tot/Page#method-printToPDF

      ### Header and footer

      Chrome's support for native header and footer sections is a little bit finicky. Still, to
      the best of my knowledge, `headerTemplate` and `footerTemplate` are the only
      well-functioning solutions if you need headers or footers that are repeated on multiple
      pages even in the presence of body elements stretching across a page break.

      In order to make header and footer visible in the first place, you will need to be aware of
      a couple of caveats:

      * HTML for header and footer is interpreted in a new page context which means no body
        styles will be applied. In fact, even default browser styles are not present, so all
        content will have a default `font-size` of zero, and so on.
      * You need to make space for the header and footer templates first, by adding page margins.
        Margins can either be given using the `marginTop` and `marginBottom` options or with CSS
        styles. If you use the options, the height of header and footer elements will inherit
        these values. If you use CSS styles, make sure to set the height of the elements in CSS
        as well.
      * Header and footer have a default *padding* to the page ends of 0.4 centimeters. To remote
        this, add the following to header/footer template styles [(source)](https://github.com/puppeteer/puppeteer/issues/4132).

            #header, #footer { padding: 0 !important; }

      * If header or footer is not displayed when it should, make sure your HTML is valid. Tuning
        the margins for an hour looking for mistakes there, only to discover that you are missing
        a closing `</style>` tag, can be quite painful.
      * Javascript is not interpreted.
      * Background colors are not applied, unless you include set `-webkit-print-color-adjust: exact`
        in the CSS.

      See [`print_header_footer_template.html`](https://cs.chromium.org/chromium/src/components/printing/resources/print_header_footer_template_page.html)
      from the Chromium sources to see how these values are interpreted.

      ### Page size and margins

      Chrome will use the provided `pagerWidth` and `paperHeight` dimensions as the PDF paper
      format, unless the `preferCSSPageSize` option is set to `true` in which case it prioritizes
      values set in a `@page` section in the (body) CSS. However, any margin applied to the page
      using the options above is generally overridden by margin rules in the `@page` section.
      """
      @spec print_to_pdf(
              input :: Processor.source() | Processor.source_and_options(),
              opts :: [Processor.pdf_option()]
            ) :: Processor.return()
      def print_to_pdf(input, opts \\ []) do
        Processor.print_to_pdf(__MODULE__, input, opts)
      end

      @doc """
      Captures a screenshot.

      This call blocks until the screenshot has been created.

      ## Print and return Base64-encoded PNG

          {:ok, blob} = ChromicPDF.capture_screenshot({:url, "file:///example.html"})

      ## Options

      Options can be passed by passing a map to the `:capture_screenshot` key.

          ChromicPDF.capture_screenshot(
            {:url, "file:///example.html"},
            capture_screenshot: %{
              format: "jpeg"
            }
          )

      Please see docs for details:

      https://chromedevtools.github.io/devtools-protocol/tot/Page#method-captureScreenshot
      """
      @spec capture_screenshot(
              url :: Processor.source(),
              opts :: keyword()
            ) :: Processor.return()
      def capture_screenshot(input, opts \\ []) do
        Processor.capture_screenshot(__MODULE__, input, opts)
      end

      @doc """
      Converts a PDF to PDF/A (either PDF/A-2b or PDF/A-3b).

      ## Convert an input PDF and return a Base64-encoded blob

          {:ok, blob} = ChromicPDF.convert_to_pdfa("some_pdf_file.pdf")

      ## Convert and write to file

          ChromicPDF.convert_to_pdfa("some_pdf_file.pdf", output: "output.pdf")

      ## PDF/A versions & levels

      Ghostscript supports both PDF/A-2 and PDF/A-3 versions, both in their `b` (basic) level. By
      default, ChromicPDF generates version PDF/A-3b files.  Set the `pdfa_version` option for
      version 2.

          ChromicPDF.convert_to_pdfa("some_pdf_file.pdf", pdfa_version: "2")

      ## Specifying PDF metadata

      The converter is able to transfer PDF metadata (the `Info` dictionary) from the original
      PDF file to the output file. However, files printed by Chrome do not contain any metadata
      information (except "Creator" being "Chrome").

      The `:info` option of the PDF/A converter allows to specify metatadata for the output file
      directly.

          ChromicPDF.convert_to_pdfa("some_pdf_file.pdf", info: %{creator: "ChromicPDF"})

      The converter understands the following keys, all of which accept only String values:

      * `:title`
      * `:author`
      * `:subject`
      * `:keywords`
      * `:creator`
      * `:creation_date`
      * `:mod_date`

      By specification, date values in `:creation_date` and `:mod_date` do not need to follow a
      specific syntax. However, Ghostscript inserts date strings like `"D:20200208153049+00'00'"`
      and Info extractor tools might rely on this or another specific format. The converter will
      automatically format given `DateTime` values like this.

      Both `:creation_date` and `:mod_date` are filled with the current date automatically (by
      Ghostscript), if the original file did not contain any.

      ## Adding more PostScript to the conversion

      The `pdfa_def_ext` option can be used to feed more PostScript code into the final conversion
      step. This can be useful to add additional features to the generated PDF-A file, for
      instance a ZUGFeRD invoice.

          ChromicPDF.convert_to_pdfa(
            "some_pdf_file.pdf",
            pdfa_def_ext: "[/Title (OverriddenTitle) /DOCINFO pdfmark",
          )
      """
      @spec convert_to_pdfa(
              pdf_path :: Processor.path(),
              opts :: [Processor.pdfa_option()]
            ) :: Processor.return()
      def convert_to_pdfa(pdf_path, opts \\ []) do
        Processor.convert_to_pdfa(__MODULE__, pdf_path, opts)
      end

      @doc """
      Prints a PDF and converts it to PDF/A in a single call.

      See `print_to_pdf/2` and `convert_to_pdfa/2` for options.

      ## Example

          ChromicPDF.print_to_pdfa({:url, "https://example.net"})
      """
      @spec print_to_pdfa(
              input :: Processor.source() | Processor.source_and_options(),
              opts :: [Processor.pdf_option() | Processor.pdfa_option()]
            ) :: Processor.return()
      def print_to_pdfa(input, opts \\ []) do
        Processor.print_to_pdfa(__MODULE__, input, opts)
      end
    end
  end
end
